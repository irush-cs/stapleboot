#!/usr/bin/perl -w

#
# Copyright (C) 2007-2011 Hebrew University Of Jerusalem, Israel
# See the LICENSE file.
#
# Author: Yair Yarom <irush@cs.huji.ac.il>
#

use strict;
use warnings;
use lib "../lib";
use Staple;
use Staple::Misc;
use Staple::Hangman;
use Staple::Application::Boot;
use Term::ReadKey;
use Term::ReadLine;
use IO::Stty;

#use Sys::Syslog;
#use Sys::Syslog qw(:macros);

my $sysinitoutput = "";
my $pager = undef;
my $input = undef;
my $rununtil = undef;

my $currentStage = "init";

my %stages = (
              init             => {name => "Init"             , function => \&initStage            , next => "autoScripts"     , prev => "init"            , order =>  0},
              autoScripts      => {name => "Auto Scripts"     , function => \&autoScriptsStage     , next => "auto"            , prev => "init"            , order =>  1},
              auto             => {name => "Auto"             , function => \&autoStage            , next => "mountTemplates"  , prev => "autoScripts"     , order =>  2},
              mountTemplates   => {name => "Mount Templates"  , function => \&mountTemplatesStage  , next => "mountScripts"    , prev => "auto"            , order =>  3},
              mountScripts     => {name => "Mount Scripts"    , function => \&mountScriptsStage    , next => "mount"           , prev => "mountTemplates"  , order =>  4},
              mount            => {name => "Mounts"           , function => \&mountStage           , next => "sysinitTemplates", prev => "mountScripts"    , order =>  5},
              sysinitTemplates => {name => "Sysinit Templates", function => \&sysinitTemplatesStage, next => "sysinitScripts"  , prev => "mount"           , order =>  6},
              sysinitScripts   => {name => "Sysinit Scripts"  , function => \&sysinitScriptsStage, , next => "sysinit"         , prev => "sysinitTemplates", order =>  7},
              sysinit          => {name => "Sysinit"          , function => \&sysinitStage,        , next => "finalTemplates"  , prev => "sysinitScripts"  , order =>  8},
              finalTemplates   => {name => "Final Templates"  , function => \&finalTemplatesStage, , next => "finalScript"     , prev => "sysinit"         , order =>  9},
              finalScript      => {name => "Final Scripts"    , function => \&finalScriptsStage,   , next => "final"           , prev => "finalTemplates"  , order => 10},
              final            => {name => "Final"            , function => \&finalStage,          , next => "done"            , prev => "finalScript"     , order => 11},
              done             => {name => "Done"             , function => \&doneStage,           , next => undef             , prev => "final"           , order => 12},
             );

my @currentCompletionList = ();
my $prevparam = "";

sub command_completion {
    my ($text, $count) = @_;
    if ($count == 0) {
        @currentCompletionList = grep {index($_, $text) == 0} ("help", "h", "?", "stages", "tokens", "mounts", "groups", "templates", "configurations", "scripts", "autos", "run", "skip", "prev", "goto", "token:", "bash", "debug-off", "run-until", "quit");
    }
    if (@currentCompletionList == 1 && $currentCompletionList[0] eq "token:") {
        $input->Attribs->{completion_append_character} = "";
    } else {
        $input->Attribs->{completion_append_character} = " ";
    }
    return $currentCompletionList[$count];
}

sub stage1_completion {
    my ($text, $count) = @_;
    if ($count == 0) {
        @currentCompletionList = grep {index(lc($_), lc($text)) == 0} map {$_->{name}} values %stages;
    }
    return $currentCompletionList[$count];
}

sub stage2_completion {
    my ($text, $count) = @_;
    if ($count == 0) {
        my @list = ();
        push @list, "Templates" if (grep {lc($prevparam) eq $_} qw(auto mount sysinit final));
        push @list, "Scripts" if (grep {lc($prevparam) eq $_} qw(mount sysinit final));
        @currentCompletionList = grep {index(lc($_), lc($text)) == 0} @list;
    }
    return $currentCompletionList[$count];
}

sub attempted_completion {
    my ($text, $line, $start, $end) = @_;
    #$currentCommand = substr($line, 0, $start);
    if (substr($line, 0, $start) =~ /^\s*$/) {
        return $input->completion_matches($text, \&command_completion);
    } else {
        (my $command) = $line =~ m/^\s*(\S+)/;
        if (lc($command) eq "goto" or lc($command) eq "run-until") {
            my $parameter = substr($line, 0, $start) =~ s/((^|\s)\S)/$1/g;
            if ($parameter == 1) {
                return $input->completion_matches($text, \&stage1_completion);
            } elsif ($parameter == 2) {
                $line =~ s/^\s*//;
                my @params = split /\s+/, $line;
                $prevparam = $params[$line =~ m/\s$/ ? -1 : -2];
                return $input->completion_matches($text, \&stage2_completion);
            }
        }
        return ();
    }
    return ();
}

sub readDebugLine {
    my $prompt = shift;
    my $readline = shift;
    unless (defined $input) {
        $input = new Term::ReadLine 'stapleboot';
        my $attribs = $input->Attribs;
        $attribs->{completion_entry_function} = sub {return ()};
        $attribs->{attempted_completion_function} = \&attempted_completion;
    }
    return $readline ? $input->readline($prompt) : <>;
}

# input: boot, debug action
# output: no debug: 0
#         bash: 0 on failer, or exit code of bash
#         prompt: enters prompt
# does debuggin according to input (bash or prompt)
sub debug {
    my $boot = shift;
    my $stage = $stages{$currentStage}->{name};
    my $action = shift;
    if (defined $rununtil) {
        if ($rununtil eq $currentStage) {
            $rununtil = undef;
        } else {
            return 0;
        }
    }
    if ($action eq "bash") {
        $boot->output($stage, 0);
        my $oldmode = IO::Stty::stty(\*STDIN, '-g');
        IO::Stty::stty(\*STDIN, 'isig');
        system($boot->{bash});
        IO::Stty::stty(\*STDIN, $oldmode);
        if ($? == -1) {
            $boot->error("Failed to run $boot->{bash}: $!");
            $boot->addMail("Failed to run $boot->{bash}: $!");
            return 0;
        }
        return $? >> 8;
    } elsif ($action eq "prompt") {
        my $tokenValue = "";
        my $tokenKey = "";
        while (1) {
            my $line = readDebugLine("staple [$stage]> ", !length($tokenKey));
            # end of input? might not be able to get a terminal
            last unless defined $line;
            if ($tokenKey) {
                if ($line =~ m/;\n$/) {
                    $line =~ s/;\n$//;
                    $tokenValue .= $line;
                    $boot->addTokens({"$tokenKey" => {key => "$tokenKey", value => "$tokenValue", raw => "$tokenValue", type => "static", source => "manual"}});
                    $tokenValue = "";
                    $tokenKey = "";
                } else {
                    $tokenValue .= $line;
                    print "token>";
                    next;
                }
            } else {
                chomp $line;
                $line =~ s/^ *//;
                if ($line =~ m/^token:[^=]+=/i) {
                    $line =~ s/^[tT][oO][kK][eE][nN]:/token:/;
                } else {
                    $line =~ s/ *$//;
                    $line = lc($line);
                }
                if ($line eq "h") {
                    my $failed = hangman();
                    if ($failed > 0) {
                        print "\n$failed hanged men\n";
                    } elsif ($failed < 0) {
                        print "\nfailed to run hangman :-(\n";
                    }
                } elsif ($line eq "run") {
                    last;
                } elsif ($line =~ m/^goto (.+)$/) {
                    my $newStage = $1;
                    (my $newCurrentStage) = grep {lc($stages{$_}->{name}) eq $newStage} keys %stages;
                    if ($newCurrentStage) {
                        $currentStage = $newCurrentStage;
                        $stage = $stages{$currentStage}->{name};
                    } else {
                        print "unknown stage: \"$newStage\"\n";
                    }
                } elsif ($line eq "skip") {
                    $currentStage = $stages{$currentStage}->{next};
                    last unless $currentStage;
                    $stage = $stages{$currentStage}->{name};
                } elsif ($line eq "prev") {
                    $currentStage = $stages{$currentStage}->{prev};
                    $stage = $stages{$currentStage}->{name};
                } elsif ($line eq "stages") {
                    my $tempStage = "init";
                    while ($tempStage) {
                        if ($tempStage eq $currentStage) {
                            print "-> ";
                        } else {
                            print "   ";
                        }
                        print $stages{$tempStage}->{name}."\n";
                        $tempStage = $stages{$tempStage}->{next};
                    }
                } elsif ($line eq "bash") {
                    my $oldmode = IO::Stty::stty(\*STDIN, '-g');
                    IO::Stty::stty(\*STDIN, 'isig');
                    system($boot->{bash});
                    IO::Stty::stty(\*STDIN, $oldmode);
                    $boot->error("Failed to run $boot->{bash}: $!") if ($? == -1);
                } elsif ($line =~ m/^token:([^=]+)=(.*);$/) {
                    $boot->addTokens({"$1" => {key => "$1", value => "$2", raw => "$2", type => "static", source => "manual"}});
                } elsif ($line =~ m/^token:([^=]+)=(.*)$/) {
                    $tokenKey = $1;
                    $tokenValue = "$2\n";
                    print "token>";
                    next;
                } elsif ($line eq "tokens") {
                    printPager(tokensToXML($boot->{tokens}));
                } elsif ($line eq "mounts") {
                    my @temp = @{$boot->{mounts}};
                    my $temp = join("\n", map {$_->description(1)} @temp);
                    $temp .= "\n";
                    printPager($temp);
                } elsif ($line eq "templates") {
                    my @temp = @{$boot->{templates}};
                    my $temp = join("\n", map {$_->description(1)} @temp);
                    $temp .= "\n";
                    printPager($temp);
                } elsif ($line eq "configurations") {
                    my @temp = @{$boot->{configurations}};
                    my $temp = "";
                    $temp .= join "\n", map {"   ".$_->name()} @temp;
                    printPager($temp);
                } elsif ($line eq "groups") {
                    my @temp = @{$boot->{groups}};
                    my $temp = "";
                    $temp .= join "\n", map {"   ".$_->name()} @temp;
                    $temp .= "\n";
                    printPager($temp);
                } elsif ($line eq "scripts") {
                    my @temp = @{$boot->{scripts}};
                    my $temp = join("\n", map {$_->description(1)} @temp);
                    $temp .= "\n";
                    printPager($temp);
                } elsif ($line eq "autos") {
                    my @temp = @{$boot->{autos}};
                    my $temp = join("\n", map {$_->description(1)} @temp);
                    $temp .= "\n";
                    printPager($temp);
                } elsif ($line eq "quit") {
                    $currentStage = undef;
                    last;
                } elsif ($line eq "debug-off") {
                    my $dtoken = $boot->{tokens}->{__STAPLE_DEBUG__};
                    if ($dtoken) {
                        $dtoken->{value} = "0";
                        # need to add for the updateData (even though reference change)
                        $boot->addTokens({__STAPLE_DEBUG__ => $dtoken});
                    }
                } elsif ($line =~ m/^run-until (.+)$/) {
                    my $newStage = $1;
                    (my $temp) = grep {lc($stages{$_}->{name}) eq lc($newStage)} keys %stages;
                    if ($temp) {
                        if ($stages{$temp}{order} <= $stages{$currentStage}{order}) {
                            print "Can't run backwards\n";
                        } else {
                            $rununtil = $temp;
                            return 0;
                        }
                    } else {
                        print "unknown stage: \"$newStage\"\n";
                    }
                } elsif ($line ne "") {
                    if ($line !~ m/^help$|^\?$/) {
                        print "Unknown command: $line\n";
                    }
                    print <<EOF
Known commands:
   help|h|?               - Print this message
   stages                 - Print all stages
   tokens                 - Print all tokens
   mounts                 - Print all mounts
   groups                 - Print all groups
   templates              - Print all templates
   configurations         - Print all configurations
   scripts                - Print all scripts
   autos                  - Print all autos
   run                    - Run current stage
   run-until <stage>      - Run until <stage> (excluding)
   skip                   - Skip current stage (exits on last stage)
   prev                   - Goto previous stage
   goto <stage>           - Goto specific stage
   token:<token>=<value>; - changes <token>'s value to <value> (no auto)
   bash                   - runs $boot->{bash}
   debug-off              - turns off debugging
   quit                   - Completely exits stapleboot
EOF
                    
                }
            }
            #print "staple [$stage]> ";
        }
    }
    return 0;
}


################################################################################
#   Output (maybe move to Application?)
################################################################################

# input: string
# no output
# prints the string to STDOUT, if count(\n) > $nrows, pipe to $pager if exists
sub printPager {
    my $input = shift;
    if ($pager) {
        my @temp = $input =~ m/(\n)/g;
        if (scalar(@temp) >= (GetTerminalSize())[1] and open(PAGER, "| $pager")) {
            print PAGER $input;
            close(PAGER);
        } else {
            print STDOUT $input;
        }
    } else {
        print STDOUT $input;
    }
}

################################################################################
#   Stages
################################################################################

sub initStage {
    my $boot = shift;
    $boot->setTokens({$boot->{db}->getCompleteTokens({})});

    unless (-e $boot->{conf}) {
        $boot->error("$boot->{conf} does not exists.");
        $boot->addMail("$boot->{conf} does not exists.");
    }

    unless ($boot->{db}->getHostGroup($boot->{host})) {
        if (exists $boot->{tokens}->{__STAPLE_USE_DEFAULT_HOST__}) {
            my $defaulthost = $boot->{tokens}->{__STAPLE_USE_DEFAULT_HOST__}->{value};
            if ($defaulthost and
                $boot->{db}->getHostGroup($defaulthost)) {
                $boot->output("$boot->{host} does not exist, using $defaulthost instead", 1);
                $boot->{defaulthost} = $defaulthost;
                $boot->setTokens({$boot->{db}->getCompleteTokens({})});
                goto haveHost;
            }
        }
        $boot->error("$boot->{host} does not exist in the staple database");
        $boot->addMail("$boot->{host} does not exist in the staple database");
        $boot->doCriticalAction();
    }
    
  haveHost:
    $boot->output("Starting: $boot->{host}", 1);
    
    unless ($boot->{distribution}) {
        $boot->error("Can't recognize distribution");
        $boot->addMail("Can't determine current distribution (both /etc/staple/distribution and /proc/cmdline are missing)");
        $boot->doCriticalAction();
    }
    my @distributions = $boot->{db}->getAllDistributions();
    unless (grep {$_ eq $boot->{distribution}} @distributions) {
        $boot->error("\"$boot->{distribution}\" does not exist in the staple database");
        $boot->addMail("\"$boot->{distribution}\" does not exist in the staple database");
        $boot->doCriticalAction();
    }
    my $dbversion = $boot->{db}->getDistributionVersion($boot->{distribution});
    if (versionCompare($Staple::VERSION, $dbversion) < 0) {
        $boot->error("Warning: database version is higher than stapleboot version ($dbversion vs. $Staple::VERSION)");
        $boot->addMail("Warning: database version is higher than stapleboot version ($dbversion vs. $Staple::VERSION)");
    }
    
    $boot->setDefaultGroups();
    $boot->update();
    
    $boot->output("Distribution: $boot->{distribution} ".$boot->{db}->getDistributionVersion($boot->{distribution}), 2);

    $boot->mountTmp() unless ($boot->{disabled});
    # openlog("stapleboot", "", $boot->{syslog});
}

sub autoScriptsStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Auto Scripts", 1);
        $boot->applyScripts("auto");
    }
}

sub autoStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Auto", 1);
        my @autoGroups = $boot->applyAutos();
        if (@autoGroups) {
            $boot->output("Automatically added groups:\n".join("\n", @autoGroups), 2);
#            if ($boot->{syslog}) {
#                foreach my $group (@autoGroups) {
#                    syslog(LOG_INFO, "autogroup: \%s", $group);
#                }
#            }
        } else { 
            $boot->output("No automatically added groups", 2);
        }
        my @realGroups = $boot->{db}->getGroupsByName(@autoGroups);
        if (scalar @realGroups != scalar @autoGroups) {
            my @missings = grep {my $a = $_; not grep {$a eq $_->name()} @realGroups} @autoGroups;
            my $error = "Unknown groups from autogroup script:\n  ".join("\n  ", @missings)."\n";
            $boot->error("$error");
            $boot->addMail("$error");
        }

        $boot->setDefaultGroups(@autoGroups);
        $boot->update();

    }
}

sub mountTemplatesStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Mount Templates", 1);
        $boot->applyTemplates("mount");
    }
}

sub mountScriptsStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Mount Scripts", 1);
        $boot->applyScripts("mount");
    }
}

sub mountStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Mounts", 1);
        my @fstab = $boot->applyMounts();
        if (open(FSTAB, ">/etc/fstab")) {
            print FSTAB join "\n", @fstab;
            print FSTAB "\n";
            close(FSTAB);
        } elsif (!@fstab and ! -e "/etc/fstab") {
            $boot->output("no entires to add to non-existing /etc/fstab, ignoring...");
        } else {
            my $err = "Can't open /etc/fstab: $!";
            $boot->error($err);
            $boot->addMail($err."\n\nShould Contain:\n".join("\n", @fstab));
        }
    }
}

sub sysinitTemplatesStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Sysinit Templates", 1);
        $boot->applyTemplates("sysinit");
    }
}

sub sysinitScriptsStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Sysinit Scripts", 1);
        $boot->applyScripts("sysinit");
    }
}

sub sysinitStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Sysinit ($boot->{sysinit})", 1);
        system("$boot->{sysinit}");
        # but I want it to show on the screen as well...
        #$sysinitoutput = `$boot->{sysinit} 2>&1`;
    }
}

sub finalTemplatesStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Final Templates", 1);
        $boot->applyTemplates("final");
    }
}

sub finalScriptsStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Final scripts", 1);
        $boot->applyScripts("final");
    }
}

sub finalStage {
    my $boot = shift;
    unless ($boot->{disabled}) {
        $boot->output("Final", 1);
        $boot->umountTmp();
        
        if ($boot->{staplelog}) {
            
            # rotate logs
            unlink "/$boot->{staplelog}.9.gz";
            for (my $i = 8; $i > 0; $i--) {
                my $j = $i + 1;
                if (-e "/$boot->{staplelog}.$i.gz") {
                    `mv /$boot->{staplelog}.$i.gz /$boot->{staplelog}.$j.gz`;
                }
            }
            if (-e "/$boot->{staplelog}.0") {
                `mv /$boot->{staplelog}.0 $boot->{staplelog}.1`;
                `gzip /$boot->{staplelog}.1`;
            }
            `mv /$boot->{staplelog} /$boot->{staplelog}.0` if (-e "/$boot->{staplelog}");

            # create new log
            unless (open(LOG, ">/$boot->{staplelog}")) {
                my $err = "Can't open file /$boot->{staplelog} for writing: $!";
                $boot->error($err);
                $boot->addMail($err);
            } else {
                my $db = $boot->{db}->info();
                print LOG "staple finished at: ".scalar(localtime(time))."\n";
                print LOG "host name: $boot->{host}\n";
                print LOG "staple version: $Staple::VERSION\n";
                print LOG "staple database: $db\n";
                print LOG "distribution: $boot->{distribution} (".$boot->{db}->getDistributionVersion($boot->{distribution}).")\n";
                print LOG "kernel: ".`uname -smr`;
                print LOG "\ngroups:\n";
                print LOG join "", map {"  ".$_->name()."\n"} @{$boot->{groups}};
                print LOG "\nconfigurations:\n";
                print LOG join "", map {"  ".$_->name()."\n"} @{$boot->{configurations}};
                print LOG "\nautos:\n";
                foreach my $auto (keys %{$boot->{applied}->{autos}}) {
                    print LOG "  $auto\n";
                    print LOG join "", map {"    $_\n"} @{$boot->{applied}->{autos}->{$auto}};
                }
                print LOG "\ntemplates:\n  ";
                print LOG join "\n  ", @{$boot->{applied}->{templates}};
                print LOG "\n";
                print LOG "\nscripts:\n  ";
                print LOG join "\n  ", @{$boot->{applied}->{scripts}};
                print LOG "\n";
                my $badMounts = $boot->getBadMounts();
                if (@$badMounts) {
                    print LOG "\nbad mounts:\n";
                    foreach my $mount (@$badMounts) {
                        print LOG "  $mount->{destination}\n";
                        print LOG "    configuration: ".$mount->configuration()->name()."\n";
                        print LOG "    command: $mount->{_cmd}\n";
                        print LOG "    status: $mount->{_status}\n";
                    }
                    print LOG "\n";
                }
                print LOG "\ntokens:\n";
                print LOG tokensToXML($boot->{tokens});
                if ($sysinitoutput) {
                    print LOG "\nsysinit ($boot->{sysinit}):\n";
                    print LOG $sysinitoutput;
                }
                close(LOG);
            }
        }
    }
}

sub doneStage {
    my $boot = shift;
    $boot->output("Done", 1);
    # syslog close
    # closelog();
}


################################################################################
#   main
################################################################################

@SIG{("INT", "QUIT", "TSTP")} = ('IGNORE','IGNORE','IGNORE');

my $boot = Staple::Application::Boot->new(\&debug);

if ($< != 0) {
    $boot->error("Must run as root");
    exit(1);
}

if ($ENV{PAGER} and -e $ENV{PAGER}) {
    $pager = $ENV{PAGER};
} elsif (grep {-e $_} map {"$_/less"} split /:/, $ENV{PATH}) {
    $pager = "less";
} elsif (grep {-e $_} map {"$_/more"} split /:/, $ENV{PATH}) {
    $pager = "more";
}

$boot->output("Version: $Staple::VERSION");

while ($currentStage) {
    $boot->debug($boot->{debug});
    last unless $currentStage;
    #eval {&{$stages{$currentStage}->{function}}($boot)};
    &{$stages{$currentStage}->{function}}($boot);
    $currentStage = $stages{$currentStage}->{next};
}

$boot->mail("boot errors summary", $boot->{mailBody}) if $boot->{mailBody};

exit($boot->exitCode());
